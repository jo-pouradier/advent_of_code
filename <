package main

import (
	"bufio"
	"fmt"
	"reflect"
	"sort"
	"strconv"
	"strings"

	"golang.org/x/exp/constraints"
)

func sum[T constraints.Signed](array []T) int64 {
	var result int64
	result = 0
	for _, v := range array {
		result += int64(v)
	}
	return result
}

var digit_map = map[string]int{
	"one":   1,
	"1":     1,
	"two":   2,
	"2":     2,
	"three": 3,
	"3":     3,
	"four":  4,
	"4":     4,
	"5":     5,
	"five":  5,
	"6":     6,
	"six":   6,
	"7":     7,
	"seven": 7,
	"8":     8,
	"eight": 8,
	"9":     9,
	"nine":  9,
}

//	var all_digit_str = []string{
//		"one", "two", "three", "four", "five", "six", "seven", "eight", "nine",
//		"1", "2", "3", "4", "5", "6", "7", "8", "9",
//	}
var all_digit_str = reflect.ValueOf(digit_map).MapKeys()

func main() {
	// file := "./day_1/part2/input2.txt"
	// data, err := os.ReadFile(file)
	// if err != nil {
	// 	fmt.Errorf("ERROR: %s", err)
	// 	return
	// }
	data := `two1nine
	 eightwothree
	 abcone2threexyz
	 xtwone3four
	 4nineeightseven2
	 zoneight234
	1148pdtcl1eight5oneights
	 51threetwovrbv5
	 7pqrstsixteen`

	// scanner to read file by lines
	// scanner := bufio.NewScanner(bytes.NewReader(data))
	scanner := bufio.NewScanner(strings.NewReader(data))
	total := 0
	for scanner.Scan() {
		index_each_digit := map[int]string{}
		txt := scanner.Text()
		fmt.Println("txt=", txt)
		for _, digit_str := range all_digit_str {
			counter_appearance := strings.Count(txt, digit_str.String())
			fmt.Println(digit_str, counter_appearance)
			for i := -1; i < counter_appearance; i++ {
				fmt.Println("i=", i)

				// index_each_digit = append(index_each_digit, strings.Index(txt, digit_str))
				substring_idx := strings.Index(txt, digit_str.String())
				if substring_idx > -1 {
					index_each_digit[substring_idx] = digit_str.String()
					strings.Replace(txt, digit_str.Interface().(string), "", 1)
				}
			}
		}
		// fmt.Println(index_each_digit)

		keys := []int{}
		for key := range index_each_digit {
			keys = append(keys, key)
		}
		fmt.Println("keys=", keys)
		sort.Ints(keys)
		// get firtst and last
		// fmt.Println(keys[0], keys[len(keys)-1])
		tens := index_each_digit[keys[0]]
		// fmt.Println(tens)
		// tens is a string representing the dozen of the current number
		if len(tens) > 1 {
			new_key := strconv.Itoa(digit_map[tens])
			// fmt.Println(new_key, reflect.TypeOf(new_key))
			tens = strconv.Itoa(digit_map[new_key])
		}
		unit := index_each_digit[keys[len(keys)-1]]
		if len(unit) > 1 {
			new_key := strconv.Itoa(digit_map[unit])
			// fmt.Println(new_key, reflect.TypeOf(new_key))
			unit = strconv.Itoa(digit_map[new_key])
		}
		number_str := tens + unit
		fmt.Println(number_str)
		number, _ := strconv.Atoi(number_str)
		total += number
	}

	fmt.Println(total)
}
