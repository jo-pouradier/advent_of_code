package main

import (
	"bufio"
	"bytes"
	"fmt"
	"io"
	"strconv"
	"strings"
	"unicode"
)

func LineCounter(r io.Reader) (int, error) {
	buf := make([]byte, 32*1024)
	count := 0
	lineSep := []byte{'\n'}

	for {
		c, err := r.Read(buf)
		count += bytes.Count(buf[:c], lineSep)

		switch {
		case err == io.EOF:
			return count, nil

		case err != nil:
			return count, err
		}
	}
}

func main() {
	input := `
    1abc2
    pqr3stu8vwx
    a1b2c3d4e5f
    treb7uchet
    `

	// read and separate by \n
	scanner := bufio.NewScanner(strings.NewReader(input))

	// init counter of value
	values := []int8{}
	counter_lines := 0
	var current_number string

	for scanner.Scan() {
		current_number = ""
		txt := scanner.Text()
		fmt.Println(txt)

		for _, char := range txt {
			if unicode.IsDigit(char) {
				current_number = current_number + string(char)
				break
			}
		}
		for i := len(txt) - 1; i > 0; i-- {
			if unicode.IsDigit(rune(txt[i])) {
				current_number = current_number + string(txt[i])
				break
			}
		}
		fmt.Println(current_number)
		counter_lines++
		int_value, _ := strconv.Atoi(current_number)
		values = append(values, int8(int_value))

	}
}
